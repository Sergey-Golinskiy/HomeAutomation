/*****************************************************************
 *  Haier / Midea UART → MQTT шлюз с поддержкой Home Assistant
 *  Платформа: ESP‑32  |  DEBUG edition
 *****************************************************************/
#define MQTT_MAX_PACKET_SIZE 1024
#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoOTA.h>
#include <ArduinoJson.h>

/************  Wi‑Fi  ************/
const char* ssid     = "SmartGrow_AP";
const char* password = "smartgrow_xoqO7h7o";

/************  MQTT  ************/
const char* mqtt_server = "192.168.1.100";
const uint16_t mqtt_port = 1883;
const char* mqtt_user = "sg_mqtt_user";
const char* mqtt_pass = "858hBCnYAUv73fa54hSf";

/************  Discovery / топики ************/
#define DISCOVERY_PREFIX "homeassistant"
#define NODE_ID          "cond_zal"
#define DEVICE_TOPIC     "myhome/Conditioner"

/************  Hardware ************/
#define AC_RX_PIN 16        // UART2 RX
#define AC_TX_PIN 17        // UART2 TX
HardwareSerial ACSerial(2);

WiFiClient   espClient;
PubSubClient client(espClient);

#define ID_CONNECT "myhome-Conditioner"
#define LED        2
#define LEN_B      37

/***** offsets *****/
#define B_CUR_TMP 13
#define B_CMD     17
#define B_MODE    23
#define B_FAN_SPD 25
#define B_SWING   27
#define B_LOCK_REM 28
#define B_POWER   29
#define B_FRESH   31
#define B_SET_TMP 35

/******** глобальные ********/
int fresh,power,swing,lock_rem,cur_tmp,set_tmp,fan_spd,Mode;
long prev=0;
byte inCheck=0;

/******** шаблонные кадры ********/
byte qstn[]={255,255,10,0,0,0,0,0,1,1,77,1,90};
byte on[]  ={255,255,10,0,0,0,0,0,1,1,77,2,91};
byte off[] ={255,255,10,0,0,0,0,0,1,1,77,3,92};
byte data[LEN_B] = {};

/***** Discovery JSON (PROGMEM) *****/
const char discovery_climate[] PROGMEM = R"JSON(
{
  "name": "Кондиционер (гостиная)",
  "uniq_id": "cond_zal",

  "~": "myhome/Conditioner",

  /* ---------- доступность ---------- */
  "avty_t": "~/availability",
  "pl_avail": "online",
  "pl_not_avail": "offline",

  /* ---------- режимы HVAC ---------- */
  "mode_stat_t": "~/Mode",
  "mode_cmd_t":  "~/Mode",
  "modes": ["off", "cool", "heat", "dry", "fan_only", "auto"],

  /* ----------- температура --------- */
  "temp_stat_t": "~/Set_Temp",
  "temp_cmd_t":  "~/Set_Temp",
  "curr_temp_t": "~/Current_Temp",
  "min_temp": 16,
  "max_temp": 30,
  "temp_step": 1,

  /* -------- скорость вентилятора ---- */
  "fan_mode_stat_t": "~/Fan_Speed",
  "fan_mode_cmd_t":  "~/Fan_Speed",
  "fan_modes": ["high", "medium", "low", "auto"],

  /* ------------ swing-жалюзи -------- */
  "swing_mode_stat_t": "~/Swing",
  "swing_mode_cmd_t":  "~/Swing",
  "swing_modes": ["off", "vertical", "horizontal", "both"],

  /* ---------- описание устройства --- */
  "device": {
    "identifiers":  ["cond_zal"],          /* уникальный ID */
    "name":         "Haier UART AC",
    "model":        "DIY‑ESP32",
    "manufacturer": "SmartHome Lab",
    "sw_version":   "1.0.0"
  }
}
)JSON";;

/* ----------- УТИЛИТЫ -------------*/
inline void hexDump(const byte* buf,size_t sz){
  for(size_t i=0;i<sz;i++){ if(buf[i]<16) Serial.print('0');
    Serial.print(buf[i],HEX); }
}

byte crc37(const byte* buf){ byte c=0; for(int i=2;i<36;i++) c+=buf[i]; return c; }
void sendToAC(byte* buf){
  ACSerial.write(buf,36); ACSerial.write(crc37(buf));
  Serial.print("[AC←] "); hexDump(buf,37); Serial.println();
}

/* ---------- Wi‑Fi ----------*/
void setup_wifi(){
  pinMode(LED,OUTPUT);
  Serial.println(F("[WIFI] Connecting..."));
  WiFi.setHostname("Haier-Cond");
  WiFi.begin(ssid,password);
  while(WiFi.status()!=WL_CONNECTED){
    delay(500); digitalWrite(LED,!digitalRead(LED));
    Serial.print('.');
  }
  digitalWrite(LED,HIGH);
  Serial.print(F("\n[WIFI] Connected, IP: "));
  Serial.println(WiFi.localIP());
}

/* -------- MQTT Discovery -------*/
void publishDiscovery(){
  client.publish(DISCOVERY_PREFIX "/climate/" NODE_ID "/config",
                 discovery_climate,true);
  Serial.println(F("[MQTT] Discovery sent"));
}

/* -------- MQTT reconnect -------*/
void reconnect(){
  while(!client.connected()){
    Serial.print(F("[MQTT] Connecting... "));
    if(client.connect(ID_CONNECT,mqtt_user,mqtt_pass,
                      DEVICE_TOPIC "/availability",1,true,"offline")){
      Serial.println(F("OK"));
      client.publish(DEVICE_TOPIC "/availability","online",true);
      client.subscribe(DEVICE_TOPIC "/#");
      publishDiscovery();
    } else{
      Serial.print(F("failed, rc="));
      Serial.println(client.state());
      delay(5000);
    }
  }
}

/* ---------- ПУБЛИКАЦИИ ----------*/
void pub(const char* sub,const char* val,bool retain=true){
  String t=String(DEVICE_TOPIC)+sub;
  client.publish(t.c_str(),val,retain);
  Serial.printf("[MQTT] pub %s -> %s\n",t.c_str(),val);
}

/* ---------- Разбор кадра от AC ----------*/
void InsertData(const byte* buf){
  set_tmp=buf[B_SET_TMP]+16; cur_tmp=buf[B_CUR_TMP];
  Mode=buf[B_MODE]; fan_spd=buf[B_FAN_SPD]; swing=buf[B_SWING];
  power=buf[B_POWER]; lock_rem=buf[B_LOCK_REM]; fresh=buf[B_FRESH];

  pub("/Fresh",       fresh?"on":"off");
  pub("/Lock_Remote", lock_rem?"true":"false");
  pub("/Compressor", (power==0x10||power==0x11)?"on":"off");

  if(power==0x01||power==0x11) pub("/Power","on");
  else if(power==0x00||power==0x10) pub("/Power","off");
  else if(power==0x09) pub("/Power","quiet");

  const char* swing_s=(swing==0)?"off":(swing==1)?"vertical":(swing==2)?"horizontal":"both";
  pub("/Swing",swing_s);

  const char* fan_s =(fan_spd==0)?"high":(fan_spd==1)?"medium":(fan_spd==2)?"low":"auto";
  pub("/Fan_Speed",fan_s);

  char tmp[5]; itoa(set_tmp,tmp,10); pub("/Set_Temp",tmp);
  itoa(cur_tmp,tmp,10);              pub("/Current_Temp",tmp);

  const char* mode_s=(Mode==0)?"auto":(Mode==1)?"cool":(Mode==2)?"heat":
                      (Mode==3)?"fan_only":"dry";
  pub("/Mode",mode_s);

  // RAW
  char raw[LEN_B*2+1]; for(int i=0;i<LEN_B;i++) sprintf(&raw[i*2],"%02X",buf[i]);
  client.publish(DEVICE_TOPIC "/RAW",raw,false);
}

/* ---------- MQTT Callback ----------*/
void callback(char* topic,byte* payload,unsigned int length){
  payload[length]='\0';
  Serial.printf("[CMD ] %s -> %s\n",topic,(char*)payload);
  /* (дальнейшая логика оставлена прежней, см. предыдущую версию) */
  String sT=String(topic), sP=String((char*)payload);
  auto EQ=[&](const char* s){return sT==String(DEVICE_TOPIC)+s;};
  if(EQ("/Set_Temp")){ int v=sP.toInt()-16; if(v>=0&&v<=30)data[B_SET_TMP]=v; }
  if(EQ("/Mode")){
    if(sP=="auto")data[B_MODE]=0; else if(sP=="cool")data[B_MODE]=1;
    else if(sP=="heat")data[B_MODE]=2; else if(sP=="fan_only")data[B_MODE]=3;
    else if(sP=="dry")data[B_MODE]=4;
  }
  if(EQ("/Fan_Speed")){
    if(sP=="high")data[B_FAN_SPD]=0; else if(sP=="medium")data[B_FAN_SPD]=1;
    else if(sP=="low")data[B_FAN_SPD]=2; else if(sP=="auto")data[B_FAN_SPD]=3;
  }
  if(EQ("/Swing")){
    if(sP=="off")data[B_SWING]=0; else if(sP=="vertical")data[B_SWING]=1;
    else if(sP=="horizontal")data[B_SWING]=2; else if(sP=="both")data[B_SWING]=3;
  }
  if(EQ("/Lock_Remote"))data[B_LOCK_REM]=(sP=="true")?0x80:0;
  if(EQ("/Power")){
    if(sP=="off"||sP=="false"||sP=="0"){ sendToAC(off); return; }
    if(sP=="on" ||sP=="true" ||sP=="1"){ sendToAC(on ); return; }
    if(sP=="quiet")data[B_POWER]=9;
  }
  if(EQ("/RAW")){
    for(uint8_t i=0;i<LEN_B;i++) data[i]=strtol(sP.substring(i*2,i*2+2).c_str(),nullptr,16);
    ACSerial.write(data,LEN_B); client.publish(DEVICE_TOPIC "/RAW",sP.c_str());
    return;
  }
  data[B_CMD]=0; data[9]=1; data[10]=77; data[11]=95;
  sendToAC(data);
}

/* ------------------ SETUP ------------------*/
void setup(){
  pinMode(LED,OUTPUT);
  Serial.begin(115200);
  Serial.println("\n=== Haier‑ESP32 DEBUG ===");
  ACSerial.begin(9600,SERIAL_8N1,AC_RX_PIN,AC_TX_PIN);
  setup_wifi();
  client.setServer(mqtt_server,mqtt_port);
  client.setCallback(callback);
  ArduinoOTA.setHostname("Haier-Cond");
  ArduinoOTA.begin();
}

/* ------------------ LOOP ------------------*/
void loop(){
  ArduinoOTA.handle();

  /* приём от кондиционера */
  if(ACSerial.available()>=LEN_B){
    ACSerial.readBytes(data,LEN_B);
    while(ACSerial.available()) ACSerial.read();
    if(data[LEN_B-1]!=inCheck){
      inCheck=data[LEN_B-1];
      Serial.print("[AC→] "); hexDump(data,37); Serial.println();
      InsertData(data);
    }
  }

  /* MQTT */
  if(!client.connected()) reconnect();
  client.loop();

  /* периодический опрос */
  long now=millis();
  if(now-prev>5000){ prev=now; sendToAC(qstn); }
}
