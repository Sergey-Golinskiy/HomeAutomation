/*****************************************************************
 *  Haier / Midea UART → MQTT шлюз с поддержкой Home Assistant
 *  Платформа: ESP‑8266
 *****************************************************************/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ArduinoOTA.h>
#include <ArduinoJson.h>           // для публикации discovery‑JSON

/************  Wi‑Fi  ************/
const char* ssid     = "SmartGrow_AP";
const char* password = "smartgrow_xoqO7h7o";

/************  MQTT  *************/
//  ── адрес/порт брокера ─────────────────────────────────────────
const char* mqtt_server = "192.168.1.100";
const uint16_t mqtt_port = 1883;

//  ── авторизация ───────────────────────────────────────────────
const char* mqtt_user = "sg_mqtt_user";
const char* mqtt_pass = "858hBCnYAUv73fa54hSf";

//  ── Discovery / базовые топики ────────────────────────────────
#define DISCOVERY_PREFIX "homeassistant"
#define NODE_ID          "cond_zal"         // id устройства в HA
#define DEVICE_TOPIC     "myhome/Conditioner"  // «родная» база

/************  Hardware  *************/
//IPAddress ip      (192,168,1,50);
//IPAddress gateway (192,168,1,1);
//IPAddress subnet  (255,255,255,0);

WiFiClient espClient;
PubSubClient client(espClient);

#define ID_CONNECT   "myhome-Conditioner"
#define LED          12
#define LEN_B        37

/***** offsets в 37‑байтовом кадре (см. док‑цию) *****/
#define B_CUR_TMP   13
#define B_CMD       17
#define B_MODE      23
#define B_FAN_SPD   25
#define B_SWING     27
#define B_LOCK_REM  28
#define B_POWER     29
#define B_FRESH     31
#define B_SET_TMP   35

/******** Глобальные переменные ********/
int fresh, power, swing, lock_rem, cur_tmp, set_tmp, fan_spd, Mode;
long prev = 0;
byte inCheck = 0;

/******** Шаблонные кадры ********/
byte qstn[] = {255,255,10,0,0,0,0,0,1,1,77,1,90};
byte on[]   = {255,255,10,0,0,0,0,0,1,1,77,2,91};
byte off[]  = {255,255,10,0,0,0,0,0,1,1,77,3,92};
byte lock[] = {255,255,10,0,0,0,0,0,1,3,0,0,14};
byte data[LEN_B] = {};

/********* Discovery JSON (хранится во flash) *********/
const char discovery_climate[] PROGMEM = R"JSON(
{
  "name": "Кондиционер (гостиная)",
  "uniq_id": "cond_zal",
  "dev": {
    "ids": ["cond_zal"],
    "name": "Haier UART AC",
    "mdl": "DIY‑ESP8266",
    "mf": "SmartHome Lab"
  },
  "~": "myhome/Conditioner",
  "avty_t": "~/availability",
  "pl_avail": "online",
  "pl_not_avail": "offline",
  "mode_stat_t": "~/Mode",
  "mode_cmd_t":  "~/Mode",
  "modes": ["off","cool","heat","dry","fan_only","auto"],
  "temp_stat_t": "~/Set_Temp",
  "temp_cmd_t":  "~/Set_Temp",
  "curr_temp_t": "~/Current_Temp",
  "min_temp": 16,
  "max_temp": 30,
  "temp_step": 1,
  "fan_mode_stat_t": "~/Fan_Speed",
  "fan_mode_cmd_t":  "~/Fan_Speed",
  "fan_modes": ["high","medium","low","auto"],
  "swing_mode_stat_t": "~/Swing",
  "swing_mode_cmd_t":  "~/Swing",
  "swing_modes": ["off","vertical","horizontal","both"]
}
)JSON";

/**********************************************************
 *                    СЕТЕВЫЕ ФУНКЦИИ
 **********************************************************/
void setup_wifi() {
  pinMode(LED, OUTPUT);
  digitalWrite(LED, LOW);

  /* если хотите видеть красивое имя в DHCP‑таблице—
     задайте hostname ДО WiFi.begin()                */
  WiFi.hostname("Haier-Cond");   // необязательно

  WiFi.begin(ssid, password);    // ← роутер раздаст IP автоматически

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    digitalWrite(LED, !digitalRead(LED));   // мигаем до подключения
  }
  digitalWrite(LED, HIGH);
}

void publishDiscovery() {
  client.publish(DISCOVERY_PREFIX "/climate/" NODE_ID "/config",
                 discovery_climate, true);
}

void reconnect() {
  while (!client.connected()) {
    digitalWrite(LED, !digitalRead(LED));

    if (client.connect(ID_CONNECT,
                       mqtt_user, mqtt_pass,
                       DEVICE_TOPIC "/availability",
                       1, true, "offline")) {

      client.publish(DEVICE_TOPIC "/availability", "online", true);
      client.subscribe(DEVICE_TOPIC "/#");
      publishDiscovery();
      digitalWrite(LED, HIGH);
    } else {
      delay(5000);
    }
  }
}

/**********************************************************
 *               УТИЛИТЫ UART ↔ КОНДИЦИОНЕР
 **********************************************************/
byte getCRC(const byte* buf, size_t size) {
  byte crc = 0;
  for (size_t i = 2; i < size; ++i) crc += buf[i];
  return crc;
}

void SendData(byte* buf, size_t size) {
  Serial.write(buf, size - 1);
  Serial.write(getCRC(buf, size - 1));
}

inline byte toHex(char ch) { return (ch >= 'A') ? (ch - 'A' + 10) : (ch - '0'); }

/**********************************************************
 *            ПУБЛИКАЦИЯ РАЗОБРАННОГО КАДРА В MQTT
 **********************************************************/
void InsertData(const byte* buf, size_t /*size*/) {
  set_tmp   = buf[B_SET_TMP] + 16;
  cur_tmp   = buf[B_CUR_TMP];
  Mode      = buf[B_MODE];
  fan_spd   = buf[B_FAN_SPD];
  swing     = buf[B_SWING];
  power     = buf[B_POWER];
  lock_rem  = buf[B_LOCK_REM];
  fresh     = buf[B_FRESH];

  /* --- простые топики‑переключатели --- */
  client.publish(DEVICE_TOPIC "/Fresh",         fresh     ? "on"  : "off",  true);
  client.publish(DEVICE_TOPIC "/Lock_Remote",   lock_rem  ? "true": "false",true);
  client.publish(DEVICE_TOPIC "/Compressor",   (power==0x10||power==0x11) ? "on":"off", true);

  /* --- Power (для обратной совместимости) --- */
  if (power==0x01||power==0x11) client.publish(DEVICE_TOPIC "/Power","on",  true);
  else if (power==0x00||power==0x10) client.publish(DEVICE_TOPIC "/Power","off",true);
  else if (power==0x09) client.publish(DEVICE_TOPIC "/Power","quiet",true);

  /* --- Swing --- */
  const char* swing_str = (swing==0)?"off":(swing==1)?"vertical":(swing==2)?"horizontal":"both";
  client.publish(DEVICE_TOPIC "/Swing", swing_str, true);

  /* --- Fan speed --- */
  const char* fan_str = (fan_spd==0)?"high":(fan_spd==1)?"medium":(fan_spd==2)?"low":"auto";
  client.publish(DEVICE_TOPIC "/Fan_Speed", fan_str, true);

  /* --- Температуры --- */
  char buf5[5];
  itoa(set_tmp, buf5, 10);
  client.publish(DEVICE_TOPIC "/Set_Temp", buf5, true);
  itoa(cur_tmp, buf5, 10);
  client.publish(DEVICE_TOPIC "/Current_Temp", buf5, true);

  /* --- HVAC‑режим --- */
  const char* mode_str = (Mode==0)?"auto":(Mode==1)?"cool":(Mode==2)?"heat":
                         (Mode==3)?"fan_only":"dry";
  client.publish(DEVICE_TOPIC "/Mode", mode_str, true);

  /* --- RAW для отладки --- */
  char raw[LEN_B*2+1]; raw[0]='\0';
  for(int i=0;i<LEN_B;i++){
      sprintf(&raw[i*2], "%02X", buf[i]);
  }
  client.publish(DEVICE_TOPIC "/RAW", raw, false);
}

/**********************************************************
 *                 MQTT → КАдр (управление)
 **********************************************************/
void callback(char* topic, byte* payload, unsigned int length) {
  payload[length] = '\0';
  String sTopic   = String(topic);
  String sPayload = String((char*)payload);

  auto EQ=[&](const char* suffix){return sTopic==String(DEVICE_TOPIC)+suffix;};

  /* --- Температура уставки --- */
  if (EQ("/Set_Temp")) {
    int v = sPayload.toInt() - 16;
    if (v>=0 && v<=30) data[B_SET_TMP]=v;
  }

  /* --- HVAC‑режим --- */
  if (EQ("/Mode")) {
    if      (sPayload=="auto")     data[B_MODE]=0;
    else if (sPayload=="cool")     data[B_MODE]=1;
    else if (sPayload=="heat")     data[B_MODE]=2;
    else if (sPayload=="fan_only") data[B_MODE]=3;
    else if (sPayload=="dry")      data[B_MODE]=4;
  }

  /* --- Скорость вентилятора --- */
  if (EQ("/Fan_Speed")) {
    if      (sPayload=="high")   data[B_FAN_SPD]=0;
    else if (sPayload=="medium") data[B_FAN_SPD]=1;
    else if (sPayload=="low")    data[B_FAN_SPD]=2;
    else if (sPayload=="auto")   data[B_FAN_SPD]=3;
  }

  /* --- Swing --- */
  if (EQ("/Swing")) {
    if      (sPayload=="off")        data[B_SWING]=0;
    else if (sPayload=="vertical")   data[B_SWING]=1;
    else if (sPayload=="horizontal") data[B_SWING]=2;
    else if (sPayload=="both")       data[B_SWING]=3;
  }

  /* --- Блок пульта --- */
  if (EQ("/Lock_Remote")) data[B_LOCK_REM]=(sPayload=="true")?0x80:0x00;

  /* --- Power отдельной командой (для обратной совместимости) --- */
  if (EQ("/Power")) {
    if (sPayload=="off"||sPayload=="false"||sPayload=="0"){ SendData(off,sizeof(off)); return; }
    if (sPayload=="on" ||sPayload=="true" ||sPayload=="1"){ SendData(on ,sizeof(on));  return; }
    if (sPayload=="quiet") data[B_POWER]=9;
  }

  /* --- Сырой HEX‑кадр --- */
  if (EQ("/RAW")) {
    for (uint8_t i=0;i<LEN_B;i++){
      data[i]=(toHex(sPayload[i*2])<<4)|toHex(sPayload[i*2+1]);
    }
    Serial.write(data, LEN_B);
    client.publish(DEVICE_TOPIC "/RAW", sPayload.c_str());
    return;
  }

  /* --- Сформировать и отправить кадр --- */
  data[B_CMD]=0;
  data[9]=1; data[10]=77; data[11]=95;
  SendData(data, LEN_B);
}

/**********************************************************
 *                          SETUP
 **********************************************************/
void setup() {
  pinMode(LED, OUTPUT);
  Serial.begin(9600);
  setup_wifi();

  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  /* Last Will (установится в client.connect) */
  client.setSocketTimeout(10);

  /* OTA */
  ArduinoOTA.setHostname("Haier-Cond");
  ArduinoOTA.begin();
}

/**********************************************************
 *                          LOOP
 **********************************************************/
void loop() {
  ArduinoOTA.handle();

  /* Приём ответа от кондиционера */
  if (Serial.available() >= LEN_B) {
    Serial.readBytes(data, LEN_B);
    while (Serial.available()) Serial.read();   // очистка буфера
    if (data[LEN_B-1] != inCheck) {
      inCheck = data[LEN_B-1];
      InsertData(data, LEN_B);
    }
  }

  /* MQTT */
  if (!client.connected()) reconnect();
  client.loop();

  /* Периодический опрос кондиционера */
  long now = millis();
  if (now - prev > 5000) {
    prev = now;
    SendData(qstn, sizeof(qstn));
  }
}
